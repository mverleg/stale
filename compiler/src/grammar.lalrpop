use ::std::str::FromStr;
use ::tinyvec::tiny_vec;

use crate::ast::Assignments;
use crate::ast::AssignmentKw;
use crate::ast::AssignmentDest;
use crate::ast::Ast;
use crate::ast::Block;
use crate::ast::Expr;
use crate::ast::Identifier;
use crate::ast::OpCode;
use crate::ast::Type;

grammar;

match {
    // Do not count END token when preceded by ellipsis
    r"...[ \t]*(\r\n|\n|\r)(\s|\r|\n)" => {},
} else {
    // Turn any number of semicolons and newline into a single token (without this they are skipped)
    r";*(\r\n|\n|\r)(;*|\s|\r|\n)+" => END,
} else {
    // Match double quoted string literals
    r#"("[^"]*"|([^"]*\\")*)"# => DQSTR,
    //TODO @mark: is this second half correct?
} else {
    // Match single quoted string literals
    r#"('[^']*')"# => SQSTR,
} else {
    // Ignore full-line comments
    r#"\s*#[^\r\n]*(\r\n|\n|\r)(\s|\r|\n)*"# => { },
} else {
    // Ignore any other whitespace (except newlines above)
    r"\s+" => { },
    //TODO @mark: does this mean keywords can be concatenated? that is not desirable
} else {
    _
}

pub Prog: Ast = {
    END? <bs:Statements<BlockNode>> => Ast { blocks: bs },
};

// todo: guard statement

BlockNode: Block = {
    <d:StructDecl> => d,
    <a:Assigns> => Block::Assigns(a),
    <e:Expression> => Block::Expression(e),
}

Expression: Expr = {
    AddSubExpr
}

AddSubExpr: Expr = {
    <l:AddSubExpr> "+" END? <r:MulDivExpr> => Expr::BinOp(OpCode::Add, Box::new(l), Box::new(r)),
    <l:AddSubExpr> "-" END? <r:MulDivExpr> => Expr::BinOp(OpCode::Sub, Box::new(l), Box::new(r)),
    MulDivExpr,
};

MulDivExpr: Expr = {
    <l:MulDivExpr> "*" END? <r:NullaryExpr> => Expr::BinOp(OpCode::Mul, Box::new(l), Box::new(r)),
    <l:MulDivExpr> "/" END? <r:NullaryExpr> => Expr::BinOp(OpCode::Div, Box::new(l), Box::new(r)),
    NullaryExpr,
};

NullaryExpr: Expr = {
    <s:DQSTR> => Expr::Text(s.to_string().into()),
    <s:SQSTR> => Expr::Text(s.to_string().into()),
    NumLit => Expr::Num(<>),
    "(" END? <e:AddSubExpr> ")" => e
};

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();

StructDecl: Block = {
    "struct" <n:Iden> "{" END? <fs:Comma<FieldDecl>> "}" => Block::    Struct {
        iden: n,
        fields: fs,
    },
};

FieldDecl: (Identifier, Type) = {
    <n:Iden> ":" <t:TypeUse> => (n, t),
};

Assigns: Assignments = {
    <d:AssignDest> "=" <e:Expression> => Assignments {
            dest: {
                vec![d]
            },
            op: None,
            value: Box::new(e),
    },
    <d:UntypedAssignDest> <op:AssignModifier> "=" <e:Expression> => Assignments {
        dest: {
            vec![d]
        },
        op: Some(op),
        value: Box::new(e),
    },
}

AssignDest: AssignmentDest = {
    <d:UntypedAssignDest> => d,
    <d:TypedAssignDest> => d,
}

UntypedAssignDest: AssignmentDest = {
    <kw:AssignmentKeyword?> <n:Iden> => AssignmentDest {
            kw: kw.unwrap_or(AssignmentKw::None),
            target: n,
            typ: None,
    },
}

TypedAssignDest: AssignmentDest = {
    <kw:AssignmentKeyword?> <n:Iden> ":" <t: TypeUse> => AssignmentDest {
            kw: kw.unwrap_or(AssignmentKw::None),
            target: n,
            typ: Some(t),
    },
}

AssignmentKeyword: AssignmentKw = {
    "mut" => AssignmentKw::Mut,
    "local" => AssignmentKw::Local,
}

AssignModifier: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
}

TypeUse: Type = {
    <n:Iden> => Type::new(n),
};

Iden: Identifier = <s:r"([a-zA-Z]|_[a-zA-Z0-9_])[a-zA-Z0-9_]*"> => Identifier::new(s).unwrap();

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => {
        if let Some(f) = e {
            v.push(f);
        }
        v
    }
};

Statements<T>: Vec<T> = {
    <mut v:(<T> END)*> <e:T?> => {
        if let Some(f) = e {
            v.push(f);
        }
        v
    }
};
