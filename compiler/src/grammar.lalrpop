use ::std::str::FromStr;
use ::tinyvec::tiny_vec;

use crate::ast::AssignmentDest;
use crate::ast::AssignmentKw;
use crate::ast::Assignments;
use crate::ast::Ast;
use crate::ast::BinOpCode;
use crate::ast::Block;
use crate::ast::Closure;
use crate::ast::Enum;
use crate::ast::EnumVariant;
use crate::ast::Expr;
use crate::ast::Identifier;
use crate::ast::Invoke;
use crate::ast::Struct;
use crate::ast::Type;
use crate::ast::UnaryOpCode;

grammar;

match {
    // Match double quoted string literals
    r#""[^"]*""# => DQSTR,
    //TODO @mark: is this second half correct?
} else {
    // Match single quoted string literals
    r#"('[^']*')"# => SQSTR,
} else {
    // Reserved keywords
    r#"(abstract|alias|all|annotation|any|as|assert|async|auto|await|become|bool|box|break|by|byte|catch|class|closed|companion|const|constructor|continue|data|debug|def|default|defer|del|delegate|delegates|delete|derive|deriving|do|double|dynamic|elementwise|elif|end|eval|except|extends|extern|family|field|final|finally|float|fn|for|get|global|goto|if|impl|implements|import|in|init|inject|int|interface|internal|intersect|intersection|io|is|lambda|lateinit|lazy|let|local|loop|macro|main|match|module|move|NaN|native|nill|none|null|object|open|operator|out|override|package|param|pass|private|proof|public|pure|raise|real|rec|reified|return|sealed|select|self|set|sizeof|spawn|static|steel|super|switch|sync|synchronized|tailrec|task|test|this|throw|throws|to|trait|transient|try|type|union|unite|unsafe|until|use|val|var|vararg|virtual|volatile|when|where|while|xor|yield)"# => ERROR,
} else {
    // Ignore line comments
    r#"#[^\r\n]*(\r\n|\n|\r)"# => { },
} else {
    // Do not count NEWLINE token when preceded by ellipsis
    r"\.\.\.[ \t]*(\r\n|\n|\r)*" => { },
} else {
    // Periods have special lexing because a linebreak is allowed before
   r"(\r\n|\n|\r)*\s*\." => PERIOD,
} else {
    // Turn at least one semicolons and any number of newlines into a single token (without this they are skipped)
    r";+[ \t]*( |\t|\r\n|\n|\r|;)*" => SEMICOLON,
} else {
    // Turn any remaining newlines (not preceded by semicolon, in previous rule) into a single token
    r"(\r\n|\n|\r)*" => NEWLINE,
} else {
    // Ignore any other whitespace (except newlines above)
    r"[ \t]+" => { },
    //TODO @mark: does this mean keywords can be concatenated? that is not desirable
} else {
    _
}

End: () = { SEMICOLON, NEWLINE }
MayBreak: () = { NEWLINE? }

pub Prog: Ast = {
    MayBreak <bs:Statements<BlockNode>> => Ast { blocks: bs },
}

// todo: guard statement

BlockNode: Block = {
    <d:StructDecl> => Block::Struct(d),
    <d:EnumDecl> => Block::Enum(d),
    <a:Assigns> => Block::Assigns(a),
    <e:Expression> => Block::Expression(e),
}

// precedence (though some may be warnings for being confusing):
//   1 + 2 == 3 or 4  => (1 + 2) == (3 or 4)
//   1 or 2 + 4  =>  1 or (2 + 4)
//   false or false == false or true  =>  false or (false == false) or true
Expression: Expr = {
    BoolCombineExpr
}

BoolCombineExpr: Expr = {
    <l:BoolCombineExpr> <o:BoolCombineOp> MayBreak <r:BoolCompareExpr> => Expr::BinOp(o, Box::new(l), Box::new(r)),
    BoolCompareExpr,
}

BoolCompareExpr: Expr = {
    <l:BoolCompareExpr> <o:BoolCompareOp> MayBreak <r:AddSubExpr> => Expr::BinOp(o, Box::new(l), Box::new(r)),
    AddSubExpr,
}

AddSubExpr: Expr = {
    <l:AddSubExpr> "+" MayBreak <r:MulDivExpr> => Expr::BinOp(BinOpCode::Add, Box::new(l), Box::new(r)),
    <l:AddSubExpr> "-" MayBreak <r:MulDivExpr> => Expr::BinOp(BinOpCode::Sub, Box::new(l), Box::new(r)),
    MulDivExpr,
}

MulDivExpr: Expr = {
    <l:MulDivExpr> "*" MayBreak <r:DotExpr> => Expr::BinOp(BinOpCode::Mul, Box::new(l), Box::new(r)),
    <l:MulDivExpr> "/" MayBreak <r:DotExpr> => Expr::BinOp(BinOpCode::Div, Box::new(l), Box::new(r)),
    DotExpr,
}

DotExpr: Expr = {
    <e:DotExpr> PERIOD <inv:InvokeExpr> => Expr::Dot(Box::new(e), inv),
    UnaryExpr,
}

UnaryExpr: Expr = {
    <op:UnaryOp> <e:Single> => Expr::UnaryOp(op, Box::new(e)),
    Single,
}

Single: Expr = {
    <s:DQSTR> => Expr::Text(s.to_string().into()),
    <s:SQSTR> => Expr::Text(s.to_string().into()),
    NumLit => Expr::Num(<>),
    <inv:InvokeExpr> => Expr::Invoke(inv),
    <λ:ClosureExpr> => Expr::Closure(λ),
    "(" MayBreak <e:BoolCombineExpr> ")" => e,
}

InvokeExpr: Invoke = {
    <iden:Iden> "(" MayBreak <args:Comma<Expression>> ")" => Invoke { iden, args },
    <iden:Iden> => Invoke { iden, args: vec![] },
}

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();

StructDecl: Struct = {
    "struct" <n:Iden> <gens:("[" MayBreak <GenericList> "]")?> MayBreak "{" MayBreak <fs:Comma<FieldDecl>> "}" => Struct {
        iden: n,
        fields: fs,
        generics: gens.unwrap_or_else(|| vec![]),
    },
}

EnumDecl: Enum = {
    "enum" <n:Iden> <gens:("[" MayBreak <GenericList> "]")?> MayBreak "{" MayBreak <vs:Comma<EnumVariant>> "}" => Enum {
        iden: n,
        variants: vs,
        generics: gens.unwrap_or_else(|| vec![]),
    },
}

EnumVariant: EnumVariant = {
    <StructDecl> => EnumVariant::Struct(<>),
    <EnumDecl> => EnumVariant::Enum(<>),
    <TypeUse> => EnumVariant::Existing(<>),
}

//TODO @mark: is type inference possible in this context?
FieldDecl: (Identifier, Type) = {
    <n:Iden> ":" MayBreak <t:TypeUse> => (n, t),
}

Assigns: Assignments = {
    <ds:AssignDestEq+> <e:Expression> => Assignments {
            dest: { ds },
            op: None,
            value: Box::new(e),
    },
    <d:UntypedAssignDest> <op:AssignModifier> <e:Expression> => Assignments {
        dest: { vec![d] },
        op: Some(op),
        value: Box::new(e),
    },
}

AssignDestEq: AssignmentDest = {
    <d:AssignDest> "=" => d,
}

AssignDest: AssignmentDest = {
    <UntypedAssignDest>,
    <TypedAssignDest>,
}

UntypedAssignDest: AssignmentDest = {
    <kw:AssignmentKeyword?> <n:Iden> => AssignmentDest {
            kw: kw.unwrap_or(AssignmentKw::None),
            target: n,
            typ: None,
    },
}

TypedAssignDest: AssignmentDest = {
    <kw:AssignmentKeyword?> <n:Iden> ":" MayBreak <t: TypeUse> => AssignmentDest {
            kw: kw.unwrap_or(AssignmentKw::None),
            target: n,
            typ: Some(t),
    },
}

AssignmentKeyword: AssignmentKw = {
    "mut" => AssignmentKw::Mut,
    "local" => AssignmentKw::Local,
}

AssignModifier: BinOpCode = {
    // must treat modifier and equals as one token, because lookahead is at most 1 token
    "+=" => BinOpCode::Add,
    "-=" => BinOpCode::Sub,
    "*=" => BinOpCode::Mul,
    "/=" => BinOpCode::Div,
}

BoolCompareOp: BinOpCode = {
    "==" => BinOpCode::Eq,
    "!=" => BinOpCode::Neq,
    "<" => BinOpCode::Lt,
    ">" => BinOpCode::Gt,
    "<=" => BinOpCode::Le,
    ">=" => BinOpCode::Ge,
}

BoolCombineOp: BinOpCode = {
    "and" => BinOpCode::And,
    "or" => BinOpCode::Or,
    "xor" => BinOpCode::Xor,
}

UnaryOp: UnaryOpCode = {
    "!" => UnaryOpCode::Not,
    "-" => UnaryOpCode::Min,
}

/// Simple closures can use `\ 2 * it` or `{\ 2 * it }` syntax, but full `fun` syntax is needed for explicit captures, return, generics, fun kinds, etc
ClosureExpr: Closure = {
    // With explicit {}, implicit capture and implicit args
    "{" <params:ParamList> <c:r"(\\|\\\\)"> MayBreak <bs:Statements<BlockNode>> "}" =>
        Closure { blocks: bs, params, is_cache: c == r"\\" },
    "fun" "(" MayBreak <params:ParamList> ")" <ret:(":" <TypeUse>)?> MayBreak "{" MayBreak <blocks:Statements<BlockNode>> "}" =>
        Closure { blocks, params, is_cache: false },
}

ParamList: Vec<AssignmentDest> = {
    <Comma<AssignDest>>,
}

GenericList: Vec<AssignmentDest> = {
    <Comma<AssignDest>>,
}

TypeUse: Type = {
    <iden:Iden> <gen:("[" <Comma<TypeUse>> "]")?> => Type { iden, generics: gen.unwrap_or_else(|| vec![]), },
}

Iden: Identifier = <s:r"([a-zA-Z]|_[a-zA-Z0-9])[a-zA-Z0-9_]*"> => Identifier::new(s).unwrap();

Comma<T>: Vec<T> = {
    <mut v:(<T> "," MayBreak)*> <e:T> ","? MayBreak => {
        v.push(e);
        v
    },
    () => Vec::new(),
}

Statements<T>: Vec<T> = {
    <mut v:(<T> End)*> <e:T?> => {
        if let Some(f) = e {
            v.push(f);
        }
        v
    }
}
