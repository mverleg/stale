use ::std::str::FromStr;

use crate::ast::OpCode;
use crate::ast::Expr;

grammar;

match {
    // Turn newlines into a token (they are skipped by default)
    r"(\r\n|\n|\r)(\s|\r|\n)*" => END,
} else {
    // Match string literals
    r#"("[^"]*"|([^"]*\\")*)"# => STR,
} else {
    // Ignore full-line comments
    r#"\s*#[^\r\n]*(\r\n|\n|\r)(\s|\r|\n)*"# => { },
} else {
    // Ignore any other whitespace (except newlines above)
    r"\s+" => { },
} else {
    _
}

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();

FactorOp: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
};

pub ExprNode: Expr = {
    <s:STR> => Expr::Text(s.to_string()),
    NumLit => Expr::Num(<>),
};


pub Prog: Expr = {
    ExprNode,
};
