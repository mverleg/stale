use ::std::str::FromStr;

use crate::ast::OpCode;
use crate::ast::Type;
use crate::ast::Identifier;
use crate::ast::Expr;

grammar;

match {
    // Skip newlines (not allowed in strings)
    r"(\r\n|\n|\r)(\s|\r|\n)*" => { },
} else {
    // Match string literals
    r#"("[^"]*"|([^"]*\\")*)"# => STR,
} else {
    // Ignore full-line comments
    r#"\s*#[^\r\n]*(\r\n|\n|\r)(\s|\r|\n)*"# => { },
} else {
    // Ignore any other whitespace (except newlines above)
    r"\s+" => { },
    //TODO @mark: does this mean keywords can be concatenated? that is not desirable
} else {
    _
}

pub Prog: Vec<Expr> = {
    <e:AddSubExpr*> => e
};

AddSubExpr: Expr = {
    <l:AddSubExpr> "+" <r:MulDivExpr> => Expr::BinOp(OpCode::Add, Box::new(l), Box::new(r)),
    <l:AddSubExpr> "-" <r:MulDivExpr> => Expr::BinOp(OpCode::Sub, Box::new(l), Box::new(r)),
    MulDivExpr,
};

MulDivExpr: Expr = {
    <l:MulDivExpr> "*" <r:NullaryExpr> => Expr::BinOp(OpCode::Mul, Box::new(l), Box::new(r)),
    <l:MulDivExpr> "/" <r:NullaryExpr> => Expr::BinOp(OpCode::Div, Box::new(l), Box::new(r)),
    NullaryExpr,
};

NullaryExpr: Expr = {
    <s:STR> => Expr::Text(s.to_string()),
    NumLit => Expr::Num(<>),
    StructDecl
};

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();

StructDecl: Expr = {
    "struct" <n:Iden> "{" <fs:Comma<FieldDecl>> "}" => Expr::Struct(n),
    DeepExpr
};

FieldDecl: (Identifier, Type) = {
    <n:Iden> ":" <t:TypeUse> => (n, t),
};

TypeUse: Type = {
    <n:Iden> => Type::new(n),
};

DeepExpr: Expr = {
    "(" <e:AddSubExpr> ")" => e
}

Iden: Identifier = <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => Identifier::new(s).unwrap();

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => {
        if let Some(f) = e {
            v.push(f);
        }
        v
    }
};
