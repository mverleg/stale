use ::std::str::FromStr;

use crate::ast::OpCode;
use crate::ast::Expr;

grammar;

match {
    // Turn newlines into a token (they are skipped by default)
    r"(\r\n|\n|\r)(\s|\r|\n)*" => END,
} else {
    // Match string literals
    r#"("[^"]*"|([^"]*\\")*)"# => STR,
} else {
    // Ignore full-line comments
    r#"\s*#[^\r\n]*(\r\n|\n|\r)(\s|\r|\n)*"# => { },
} else {
    // Ignore any other whitespace (except newlines above)
    r"\s+" => { },
} else {
    _
}

pub Prog: Expr = {
    <e:AddSubExpr> END* => e
};

pub AddSubExpr: Expr = {
    <l:AddSubExpr> "+" END* <r:MulDivExpr> => Expr::BinOp(OpCode::Add, Box::new(l), Box::new(r)),
    <l:AddSubExpr> "-" END* <r:MulDivExpr> => Expr::BinOp(OpCode::Sub, Box::new(l), Box::new(r)),
    MulDivExpr,
};

pub MulDivExpr: Expr = {
    <l:MulDivExpr> "*" END* <r:NullaryExpr> => Expr::BinOp(OpCode::Mul, Box::new(l), Box::new(r)),
    <l:MulDivExpr> "/" END* <r:NullaryExpr> => Expr::BinOp(OpCode::Div, Box::new(l), Box::new(r)),
    NullaryExpr,
};

pub NullaryExpr: Expr = {
    <s:STR> => Expr::Text(s.to_string()),
    NumLit => Expr::Num(<>),
    "(" <e:AddSubExpr> ")" => e
    //<l:ExprNode> <o:MulDivOp> <r:ExprNode> => Expr::BinOp(o, l, r),
    //"(" <e:ExprNode> ")" => e,
};

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();
