use ::std::str::FromStr;

use crate::ast::Block;
use crate::ast::Expr;
use crate::ast::Identifier;
use crate::ast::OpCode;
use crate::ast::Type;

grammar;

match {
    // Skip newlines (not allowed in strings)
    r"(\r\n|\n|\r)(\s|\r|\n)*" => { },
} else {
    // Match double quoted string literals
    r#"("[^"]*"|([^"]*\\")*)"# => DQSTR,
    //TODO @mark: is this second half correct?
} else {
    // Match single quoted string literals
    r#"('[^']*')"# => SQSTR,
} else {
    // Ignore full-line comments
    r#"\s*#[^\r\n]*(\r\n|\n|\r)(\s|\r|\n)*"# => { },
} else {
    // Ignore any other whitespace (except newlines above)
    r"\s+" => { },
    //TODO @mark: does this mean keywords can be concatenated? that is not desirable
} else {
    _
}

pub Prog: Vec<Block> = {
    <bs:BlockNode*> => bs
};

BlockNode: Block = {
    <d:StructDecl> => d,
    <a:Assignment> => a,
    <e:Expression> => Block::Expression(e),
}

Expression: Expr = {
    AddSubExpr
}

AddSubExpr: Expr = {
    <l:AddSubExpr> "+" <r:MulDivExpr> => Expr::BinOp(OpCode::Add, Box::new(l), Box::new(r)),
    <l:AddSubExpr> "-" <r:MulDivExpr> => Expr::BinOp(OpCode::Sub, Box::new(l), Box::new(r)),
    MulDivExpr,
};

MulDivExpr: Expr = {
    <l:MulDivExpr> "*" <r:NullaryExpr> => Expr::BinOp(OpCode::Mul, Box::new(l), Box::new(r)),
    <l:MulDivExpr> "/" <r:NullaryExpr> => Expr::BinOp(OpCode::Div, Box::new(l), Box::new(r)),
    NullaryExpr,
};

NullaryExpr: Expr = {
    <s:DQSTR> => Expr::Text(s.to_string()),
    <s:SQSTR> => Expr::Text(s.to_string()),
    NumLit => Expr::Num(<>),
    DeepExpr
};

DeepExpr: Expr = {
    "(" <e:AddSubExpr> ")" => e
}

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();

StructDecl: Block = {
    "struct" <n:Iden> "{" <fs:Comma<FieldDecl>> "}" => Block::    Struct {
        iden: n,
        fields: fs,
    },
};

FieldDecl: (Identifier, Type) = {
    <n:Iden> ":" <t:TypeUse> => (n, t),
};

Assignment: Block = {
    "mut" <n:Iden> "=" <e:Expression> "}" => Block::Assignment {
         has_mut_kw: true,
         target: n,
         typ: None,
         value: e,
    },
    "mut" <n:Iden> ":" <t: TypeUse> "=" <e:Expression> "}" => Block::Assignment {
         has_mut_kw: true,
         target: n,
         typ: Some(t),
         value: e,
    },
}

TypeUse: Type = {
    <n:Iden> => Type::new(n),
};

Iden: Identifier = <s:r"([a-zA-Z]|_[a-zA-Z0-9_])[a-zA-Z0-9_]*"> => Identifier::new(s).unwrap();

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => {
        if let Some(f) = e {
            v.push(f);
        }
        v
    }
};
